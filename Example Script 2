
local UIS = game:GetService("UserInputService")

local mouse = game.Players.LocalPlayer:GetMouse()

local rp = game:GetService("ReplicatedStorage")
local HighBall = rp:WaitForChild("HighBall")
local debounce = false

UIS.InputBegan:Connect(function(inp, p)

	if p then
		return
	end

	
	if inp.KeyCode == Enum.KeyCode.E then
		if not debounce then
			HighBall:FireServer(mouse.Hit)
			debounce = true
			wait(2)
			debounce = false
		end
		
		
		
	end







end)



local function customExplosion(position, radius, maxDamage, plr)
	local explosion = Instance.new("Explosion")
	explosion.BlastPressure = 0 -- this could be set higher to still apply velocity to parts
	explosion.DestroyJointRadiusPercent = 0 -- joints are safe
	explosion.BlastRadius = radius
	explosion.Position = position

	-- set up a table to track the models hit
	local modelsHit = {}

	-- listen for contact
	explosion.Hit:Connect(function(part, distance)
		local parentModel = part.Parent
		if parentModel then 
			if parentModel.Name ~= plr.Name then
				if modelsHit[parentModel] then
					return
				end
				-- log this model as hit
				modelsHit[parentModel] = true

				-- look for a humanoid
				local humanoid = parentModel:FindFirstChild("Humanoid")
				if humanoid then
					local distanceFactor = distance / explosion.BlastRadius -- get the distance as a value between 0 and 1
					distanceFactor = 1 - distanceFactor -- flip the amount, so that lower == closer == more damage
					humanoid:TakeDamage(maxDamage * distanceFactor) -- TakeDamage to respect ForceFields
				end	
			end
				-- check to see if this model has already been hit 
			
			
		
		end
	end)

	explosion.Parent = game.Workspace
end


HighBall.OnClientEvent:Connect(function(plr)
	
		local EndPart = game.Workspace.Part
		local newHighBall = game.Workspace.newHighBall
		local char = game.Players.LocalPlayer.Character
print(char.Name)
		local direction = EndPart.Position - newHighBall.Position
		print(char.HumanoidRootPart.Position)
		local duration = 1
	local force = direction/duration + Vector3.new(0,game.Workspace.Gravity*duration * 0.5,0)
	
	
	newHighBall.CanTouch = false	
	newHighBall:ApplyImpulse(force*newHighBall.AssemblyMass)
	wait(0.5)
	newHighBall.CanTouch = true
	
	
	newHighBall.Touched:Connect(function(hit)
		newHighBall.CanTouch = false
		
		
			newHighBall.Transparency = 1
			newHighBall.Trail:Destroy()
			customExplosion(newHighBall.Position, 20, 1000, char)
			wait(1)
			newHighBall:Destroy()
	
		
		
		
	end)
	

	
	wait(2)
	newHighBall:Destroy()
	EndPart:Destroy()
	
	
end)
